uniform_float Intensity {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.005;
    description = "How visible the grain is. Higher is more visible.";
}


uniform_float Variance {
    default = 0.5;
    min = 0.0;
    max = 1.0;
    step = 0.005;
    description = "Controls the variance of the Gaussian noise. Lower values look smoother.";
}

uniform_float Speed {
    default = 1.0;
    min = 0.0;
    max = 1.0;
    step = 0.005;
    description = "Noise speed.";
}

uniform_int SignalToNoiseRatio  {
    default = 6;
    min = 0;
    max = 16;
    step = 1;
    display_name = "Signal-to-Noise Ratio";
    description = "Higher Signal-to-Noise Ratio values give less grain to brighter pixels. 0 disables this feature.";
}

fragment grain {
    omw_In vec2 omw_TexCoord;

    const float Mean = 0.5;

    void main()
    {
        vec3 color = omw_GetLastShader(omw_TexCoord).rgb;
    
        float inv_luma = dot(color, vec3(-0.2126, -0.7152, -0.0722)) + 1.0;
        // float inv_luma = dot(color, vec3(-1.0/3.0, -1.0/3.0, -1.0/3.0)) + 1.0; //Calculate the inverted luma so it can be used later to control the variance of the grain
    
        /*---------------------.
        | :: Generate Grain :: |
        '---------------------*/

        const float PI = 3.1415927;
        
        //time counter using requested counter from ReShade
        float t = omw.simulationTime * Speed;
        
        //PRNG 2D - create two uniform noise values and save one DP2ADD
        float seed = dot(omw_TexCoord, vec2(12.9898, 78.233));// + t;
        float sine = sin(seed);
        float cosine = cos(seed);
        float uniform_noise1 = fract(sine * 43758.5453 + t); //I just salt with t because I can
        float uniform_noise2 = fract(cosine * 53758.5453 - t); // and it doesn't cost any extra ASM

        //Get settings
        float stn = SignalToNoiseRatio != 0 ? pow(inv_luma, float(SignalToNoiseRatio)) : 1.0; // Signal to noise feature - Brighter pixels get less noise.
        float variance = (Variance*Variance) * stn;
        float mean = Mean;

        //Box-Muller transform
        uniform_noise1 = (uniform_noise1 < 0.0001) ? 0.0001 : uniform_noise1; //fix log(0)
            
        float r = sqrt(-log(uniform_noise1));
        r = (uniform_noise1 < 0.0001) ? PI : r; //fix log(0) - PI happened to be the right answer for uniform_noise == ~ 0.0000517.. Close enough and we can reuse a constant.
        float theta = (2.0 * PI) * uniform_noise2;
        
        float gauss_noise1 = variance * r * cos(theta) + mean;
        //float gauss_noise2 = variance * r * sin(theta) + mean; //we can get two gaussians out of it :)

        //gauss_noise1 = (ddx(gauss_noise1) - ddy(gauss_noise1)) * 0.50  + gauss_noise2;

        //Calculate how big the shift should be
        //float grain = lerp(1.0 - Intensity,  1.0 + Intensity, gauss_noise1);
        float grain = mix(1.0 + Intensity,  1.0 - Intensity, gauss_noise1);
    
        //float grain2 = (2.0 * Intensity) * gauss_noise1 + (1.0 - Intensity);
        
        //Apply grain
        color = color * grain;
    
        //color = (grain-1.0) *2.0 + 0.5;
    
        //color = mix(color,colorInput.rgb,sqrt(luma));

        /*-------------------------.
        | :: Debugging features :: |
        '-------------------------*/

        //color.rgb = fract(gauss_noise1).xxx; //show the noise
        //color.rgb = (gauss_noise1 > 0.999) ? vec3(1.0,1.0,0.0) : 0.0 ; //does it reach 1.0?
        omw_FragColor = vec4(color.rgb, 1.0);
    }
}

technique {
    passes = grain;
    description = "Computes a noise pattern and blends it with the image to create a film grain look.";
    author = "Christian Cann Schuldt Jensen ~ CeeJay.dk, ported by Wazabear";
    version = "1.0";
}
